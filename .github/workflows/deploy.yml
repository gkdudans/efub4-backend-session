name: week11 CI/CD with Docker

on:
  push:
    branches: [ "week11" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 17
          java-version: 'zulu'

      # repository secrets에 올린 application.yml을 빌드 시 생성
      # blog 패키지 안으로 이동해야 하는 것 주의
      - name: Make application.yml
        run: |
          mkdir ./blog/src/main/resources 
          cd ./blog/src/main/resources
          touch ./application.yml
          echo "${{ secrets.APPLICATION }}" > ./application.yml
      # Build: test에는 실행권한 제외 (test 없이 build)
      - name: Build with Gradle
        run: |
          cd ./blog
          chmod +x ./gradlew
          ./gradlew build -x test
      # ID, PW 이용해 Docker hub 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Docker 이미지 빌드 후 푸시
      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          # 빌드 컨텍스트 지정: 지정한 디렉토리 안에 Dockerfile이 있어야 함
          context: ./blog
          # 빌드에 사용할 Dockerfile의 경로 지정
          file: ./blog/Dockerfile
          # 빌드할 이미지의 플랫폼 지정
          platforms: linux/arm64/v8
          # 빌드 후 Docker 레지스트리에 푸시할지 여부 지정
          push: true
          # 이미지 태그 지정
          tags: ${{ secrets.DOCKER_REPO }}:latest
      # SSH를 사용하여 EC2에 명령을 전달
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          # 원격 서버의 호스트 주소 지정
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          envs: GITHUB_SHA
          # 아래 명령들을 실행
          # 호스트의 포트번호: 컨테이너 내부 포트번호
          script: |
            sudo docker rm -f ${sudo docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}:latest
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_REPO }}:latest
            sudo docker image prune -f
